// src/routes/api/categories/+server.ts
import { json } from '@sveltejs/kit';
import type { RequestHandler } from './$types';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export const GET: RequestHandler = async () => {
	try {
		const categories = await prisma.v_categories_dev.findMany();
		return json(categories);
	} catch (error) {
		console.error('Erreur lors de la r√©cup√©ration des cat√©gories:', error);
		return json({ error: 'Erreur lors de la r√©cup√©ration des cat√©gories' }, { status: 500 });
	}
};

export const POST: RequestHandler = async ({ request }) => {
	try {
		console.log('üöÄ D√©but de la cr√©ation des cat√©gories');
		const data = await request.json();
		console.log('üì• Donn√©es re√ßues:', data);

		// Construire le chemin complet de la hi√©rarchie
		const levels = [];
		for (let i = 1; i <= 7; i++) {
			const label = data[`atr_${i}_label`];
			if (!label || label.trim() === '') {
				break;
			}
			levels.push(label.trim());
		}

		if (levels.length === 0) {
			return json(
				{ error: 'Aucun niveau de cat√©gorie √† cr√©er. Au moins le niveau 1 doit √™tre rempli.' },
				{ status: 400 }
			);
		}

		// V√©rifier si cette hi√©rarchie compl√®te existe d√©j√†
		const fullPath = levels.join('->');
		const existingPath = await prisma.attribute_dev.findFirst({
			where: {
				atr_nat: 'CATEGORIE',
				atr_val: fullPath
			}
		});

		if (existingPath) {
			return json({ error: 'Cette hi√©rarchie de cat√©gories existe d√©j√†.' }, { status: 409 });
		}

		const attributeEntries = [];
		let previousLevel = 'CATEGORIE';

		// Cr√©er chaque niveau de la hi√©rarchie
		for (let i = 0; i < levels.length; i++) {
			const label = levels[i];
			const currentPath = levels.slice(0, i + 1).join('->');

			// G√©n√©rer un atr_val unique pour ce niveau sp√©cifique dans ce chemin
			// On utilise un UUID bas√© sur le chemin complet + timestamp pour garantir l'unicit√©
			const uniqueId = `${currentPath}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

			console.log(`üîç Niveau ${i + 1}:`, {
				label,
				currentPath,
				uniqueId,
				previousLevel,
				fullPath
			});

			// Pour √©viter les doublons exacts sur cette hi√©rarchie compl√®te,
			// on v√©rifie si cette combinaison exacte existe d√©j√†
			const existingInPath = await prisma.attribute_dev.findFirst({
				where: {
					atr_nat: previousLevel,
					atr_label: label,
					// V√©rifier s'il y a d√©j√† un attribut avec ce label √† ce niveau pour ce chemin parent
					atr_val: {
						contains: currentPath
					}
				}
			});

			console.log(`üìã Attribut similaire trouv√©:`, existingInPath ? 'OUI' : 'NON');

			// Toujours cr√©er un nouvel attribut pour √©viter les conflits de hi√©rarchie
			const newAttr = await prisma.attribute_dev.create({
				data: {
					atr_nat: previousLevel,
					atr_val: uniqueId,
					atr_label: label
				}
			});

			console.log(`‚úÖ Nouvel attribut cr√©√©:`, {
				id: newAttr.atr_id,
				atr_nat: newAttr.atr_nat,
				atr_val: newAttr.atr_val,
				atr_label: newAttr.atr_label
			});

			previousLevel = newAttr.atr_val ?? '';
			attributeEntries.push(newAttr);
		}

		return json({ success: true, attributes: attributeEntries, path: fullPath });
	} catch (error) {
		console.error('Erreur lors de la cr√©ation des attributs :', error);
		return json({ error: 'Erreur lors de la cr√©ation des attributs' }, { status: 500 });
	}
};
