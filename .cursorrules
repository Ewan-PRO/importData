# Règles de développement pour ImportData

## Environnement et outils

- Utiliser **pnpm** comme gestionnaire de paquets (jamais npm)
- Stack : SvelteKit + TypeScript + PostgreSQL + Prisma + TailwindCSS
- Authentification via Logto
- Tests avec Vitest

## Commandes essentielles

```bash
pnpm dev                  # Serveur de développement
pnpm build && pnpm preview  # Build et aperçu
pnpm lint && pnpm format  # Qualité du code
pnpm check                # Vérification TypeScript
pnpm test:unit            # Tests unitaires
pnpm prisma:generate      # Génération client Prisma

# Scripts BDD-IA (Export base de données)
node scripts/BDD-IA/fetch-all-tables.mjs    # Export toutes les tables
node scripts/BDD-IA/fetch-all-views.mjs     # Export toutes les vues  
node scripts/BDD-IA/fetch-cenov-data.mjs    # Export complet (recommandé)
```

## Architecture et fichiers clés

- `src/routes/` : Pages SvelteKit (categories, kits, import, products)
- `src/lib/components/` : Composants réutilisables + UI library
- `src/lib/schemas/dbSchema.ts` : Schémas Zod pour validation
- `prisma/cenov/schema.prisma` : Schéma principal base de données CENOV
- `prisma/cenov_dev_ewan/schema.prisma` : Schéma base de données CENOV_DEV_EWAN

## Workflow Prisma

1. Éditer `prisma/cenov/schema.prisma` (ou `prisma/cenov_dev_ewan/schema.prisma`)
2. Exécuter les commandes Prisma directement sur le schéma principal

## Base de données

- Système hiérarchique kits/pièces
- Tables : kits, attributes, parts, documents
- Vues matérialisées : v_categories, v_kit_carac (+ variantes \_dev)
- Support prod/dev avec tables séparées
- **Données complètes disponibles** : Toutes les données Cenov (12 tables, 4 vues) exportées en JSON dans `scripts/BDD-IA/output/` pour analyse IA

## Conventions de code

- camelCase pour fonctions et variables
- Typage strict TypeScript
- Programmation fonctionnelle privilégiée
- async/await plutôt que callbacks
- Early returns pour éviter imbrication
- const/let jamais var
- Template literals plutôt que concaténation
- Gestion erreurs explicite avec try/catch
- Fonctions pures sans effets de bord
- Principes DRY, KISS, YAGNI

## Authentification

- Routes protégées via `src/lib/auth/protect.ts`
- Gestion session dans layouts
- Callback OAuth dans `/authentication-callback`

## Import Excel

- Fonctionnalité import dans `/import` et `/products/import`
- Support catégories, attributs, hiérarchies kits

## Tests

- Tests d'intégration dans `tests/integration/`
- CRUD operations pour categories et kits
- Tests de fonctionnalité import

## Composants UI

- Composants personnalisés basés sur bits-ui et Flowbite
- Validation formulaires avec Zod + SvelteKit Superforms
- Structure dans `src/lib/components/ui/`

**Button variants :**
- `bleu` (default) - Primary blue button
- `vert` - Success/confirmation actions
- `rouge` - Danger/delete actions  
- `jaune` - Warning actions
- `noir` - Secondary dark actions
- `blanc` - Alternative/outline style
- `link` - Text link style

**Note:** `outline` variant n'existe pas - utiliser `blanc` pour style outline.

**Badge variants :**
- `default` (default) - Primary badge style
- `bleu` - Blue informational badge
- `vert` - Success/positive badge
- `rouge` - Error/danger badge
- `noir` - Secondary/neutral badge
- `blanc` - Alternative/outline style badge

**Note:** `outline` variant n'existe pas pour badges - utiliser `blanc` pour style outline.

## Toast Notifications (Sonner)

**Setup :** svelte-sonner installé, Toaster configuré dans +layout.svelte

**Usage correct :**
```typescript
// ✅ Import correct
import { toast } from 'svelte-sonner';
import { Toaster } from 'svelte-sonner';

// ✅ Usage
toast.error('Message d\'erreur');
toast.success('Opération réussie');
toast('Message info');
```

**Erreurs à éviter :**
```typescript
// ❌ N'JAMAIS importer depuis les composants UI
import { toast } from '$lib/components/ui/sonner';
```

**Timing :**
- Toasts au chargement : `setTimeout(() => toast.error('msg'), 100)` dans `onMount`
- Handlers événements : appel direct sans délai
- Après navigation : fonctionne immédiatement

## Réponses en français

- Toujours répondre en français
- Être concis, éviter phrases de remplissage
- Montrer seulement lignes changées avec contexte minimal
- Anticiper besoins et suggérer solutions
